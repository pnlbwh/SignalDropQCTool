function mat2nhdr(m, fn, type,sd, so)
  fid = fopen([fn '.nhdr'], 'w');
  
  if nargin == 3
      sd = [];
  end
  
  switch type
      case 'ushort'
          sz = size(m);
          fprintf(fid, ['NRRD0005\n' ...
                        '# Complete NRRD file format specification at:\n' ...
                        '# http://teem.sourceforge.net/nrrd/format.html\n' ...
                        'type: unsigned short\n' ...
                        'dimension: %d\n' ...
                        'space: left-posterior-superior\n' ...
                        'sizes: %d %d %d\n' ...
                        'space directions: (%f,%f,%f) (%f,%f,%f) (%f,%f,%f)\n' ...
                        'kinds: domain domain domain\n' ...
                        'endian: little\n' ...
                        'encoding: gzip\n' ...
                        'space units: "mm" "mm" "mm"\n',...
                        'space origin: (%f,%f,%f)\n' ...
                        'data file: %s.raw.gz\n'], ...
                  length(size(m)),sz(1),sz(2),sz(3), ...
                  sd(1,1),sd(1,2),sd(1,3),sd(2,1),sd(2,2),sd(2,3),sd(3,1),sd(3,2),sd(3,3),...
                   so(1), so(2), so(3),fn);
              
              
              
      case 'float'
          fprintf(fid, ['NRRD0005\n' ...
                        '# Complete NRRD file format specification at:\n' ...
                        '# http://teem.sourceforge.net/nrrd/format.html\n' ...
                        'type: float\n' ...
                        'dimension: %d\n' ...
                        'space: left-posterior-superior\n' ...
                        'sizes: %d %d %d\n' ...
                        'space directions: (1.6667,0,0) (0,1.6667,0) (0,0,-1.7)\n' ...
                        'kinds: domain domain domain\n' ...
                        'space units: "mm" "mm" "mm"\n',...
                        'endian: little\n' ...
                        'encoding: gzip\n' ...
                        'space origin: (-119.169,-119.169,71.4)\n' ...
                        'data file: %s.raw.gz\n'], ...
                  length(size(m)),size(m), fn);
              
      case 'custom'
          sz = size(m);
          fprintf(fid, ['NRRD0005\n' ...
                        '# Complete NRRD file format specification at:\n' ...
                        '# http://teem.sourceforge.net/nrrd/format.html\n' ...
                        'type: float\n' ...
                        'dimension: %d\n' ...
                        'space: left-posterior-superior\n' ...
                        'sizes: %d %d %d\n' ...
                        'space directions: (%f,%f,%f) (%f,%f,%f) (%f,%f,%f)\n' ...
                        'kinds: domain domain domain\n' ...
                        'space units: "mm" "mm" "mm"\n',...
                        'endian: little\n' ...
                        'encoding: gzip\n' ...
                        'space origin: (-119.169,-119.169,71.4)\n' ...
                        'data file: %s.raw.gz\n'], ...
                  length(size(m)),sz(1),sz(2),sz(3), ...
                  sd(1,1),sd(1,2),sd(1,3),sd(2,1),sd(2,2),sd(2,3),sd(3,1),sd(3,2),sd(3,3),...
                   fn);

               
      case 'fMRI'
          sz = size(m);
          fprintf(fid, ['NRRD0005\n' ...
                        '# Complete NRRD file format specification at:\n' ...
                        '# http://teem.sourceforge.net/nrrd/format.html\n' ...
                        'type: unsigned short\n' ...
                        'dimension: %d\n' ...
                        'space: left-posterior-superior\n' ...
                        'sizes: %d %d %d %d\n' ...
                        'space directions: (%f,%f,%f) (%f,%f,%f) (%f,%f,%f) none\n' ...
                        'kinds: domain domain domain list\n' ...
                        'space units: "mm" "mm" "mm" none\n',...
                        'endian: little\n' ...
                        'encoding: gzip\n' ...
                        'space origin: (%f,%f,%f)\n' ...
                        'data file: %s.raw.gz\n'], ...
                  length(size(m)),sz(1),sz(2),sz(3), sz(4), ...
                  sd(1,1),sd(1,2),sd(1,3),sd(2,1),sd(2,2),sd(2,3),sd(3,1),sd(3,2),sd(3,3),...
                  so(1), so(2), so(3), ...
                   fn);
               
              
  end

  fclose(fid);
  
  
fid2 = fopen([fn '.raw'], 'w');
  switch type
      case 'ushort'
        fwrite(fid2, uint16(m), 'uint16');
      case 'float'
        fwrite(fid2, single(m), 'single');
      case 'custom'
        fwrite(fid2, single(m), 'single');
      case 'fMRI'
        fwrite(fid2, uint16(m), 'uint16');
  end
  
  fclose(fid2);
  system(['rm -f ' fn '.raw.gz && gzip ' fn '.raw']); % compress
end
